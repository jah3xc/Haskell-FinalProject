var x=1, y=2; x+y;	= eval body newEnv
	      body


initial env: []
	      (x,1)
	      (y, 2)


variables = map fst decls
expressions = map snd decls
values = 			<- eval each e from expressions using old env
newEnv = zip variables values   --don't forget to add the old env to the end

evaluate (    ) `shouldThrow` anyException

exp1 = 11
exp2 = 16
exp3 = 14
exp4 = variable is undbound

DONT ASK FOR A BETTER GRADE

free :: [String] -> Exp -> [String]
free seen (Literal _)	= []
free seen (Unary _ e )	= free
free seen (Binary _ e1 e1)	=
free seen( If t e1 e2)	=
free seen(Variable x) =
free seen (Declare bs body)	=
free seen (Call e1 e2) =
